#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; Puzzle_PeekLevel.headers.fc
;;
;; Header files for PeekLevel
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $CheckLevelResult$_store
builder $CheckLevelResult$_store(builder build_0, (slice, int) v) inline;

;; $CheckLevelResult$_store_cell
cell $CheckLevelResult$_store_cell((slice, int) v, builder b) inline;

;; $PeekLevel$_store
builder $PeekLevel$_store(builder build_0, (slice, int, int, int) v) inline;

;; $PeekLevel$_load
(slice, ((slice, int, int, int))) $PeekLevel$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $PeekLevel$init$_load
(slice, ((slice, int, int))) $PeekLevel$init$_load(slice sc_0) inline;

;; $PeekLevel$_contract_init
(slice, int, int, int) $PeekLevel$_contract_init(slice $player, int $nonce, int $password) impure inline;

;; $PeekLevel$_contract_load
(slice, int, int, int) $PeekLevel$_contract_load() impure inline;

;; $PeekLevel$_contract_store
() $PeekLevel$_contract_store((slice, int, int, int) v) impure inline;

;; $PeekLevel$_fun_locked
((slice, int, int, int), int) $PeekLevel$_fun_locked((slice, int, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $PeekLevel$_fun_notify
((slice, int, int, int), ()) $PeekLevel$_fun_notify((slice, int, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $CheckLevelResult$_constructor_name_completed
((slice, int)) $CheckLevelResult$_constructor_name_completed(slice $name, int $completed) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; Puzzle_PeekLevel.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

((slice, int, int, int), ()) $PeekLevel$_fun_notify((slice, int, int, int) $self, cell $body) impure inline {
    var (($self'player, $self'nonce, $self'password, $self'locked)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'player, $self'nonce, $self'password, $self'locked), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'player, $self'nonce, $self'password, $self'locked), ());
}

;; Puzzle_PeekLevel.constants.fc
;; String "peek"
slice __gen_slice_string_e06e2cd38d6d41220cc16e599f6e6f40bee7f7e270bb241e58de58f19d891389() asm """
    B{b5ee9c724101010100060000087065656bef530da2} B>boc <s PUSHSLICE
""";

;; Puzzle_PeekLevel.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: CheckLevelResult
;; Header: 0x00001844
;; TLB: check_level_result#00001844 name:^string completed:bool = CheckLevelResult
;;

builder $CheckLevelResult$_store(builder build_0, (slice, int) v) inline {
    var (v'name, v'completed) = v;
    build_0 = store_uint(build_0, 6212, 32);
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'name));
    build_0 = build_0.store_int(v'completed, 1);
    return build_0;
}

cell $CheckLevelResult$_store_cell((slice, int) v, builder b) inline {
    return $CheckLevelResult$_store(b, v).end_cell();
}

((slice, int)) $CheckLevelResult$_constructor_name_completed(slice $name, int $completed) inline {
    return ($name, $completed);
}

;;
;; Type: PeekLevel
;; TLB: _ player:address nonce:int257 password:uint32 locked:bool = PeekLevel
;;

builder $PeekLevel$_store(builder build_0, (slice, int, int, int) v) inline {
    var (v'player, v'nonce, v'password, v'locked) = v;
    build_0 = build_0.store_slice(v'player);
    build_0 = build_0.store_int(v'nonce, 257);
    build_0 = build_0.store_uint(v'password, 32);
    build_0 = build_0.store_int(v'locked, 1);
    return build_0;
}

(slice, ((slice, int, int, int))) $PeekLevel$_load(slice sc_0) inline {
    var v'player = sc_0~load_msg_addr();
    var v'nonce = sc_0~load_int(257);
    var v'password = sc_0~load_uint(32);
    var v'locked = sc_0~load_int(1);
    return (sc_0, (v'player, v'nonce, v'password, v'locked));
}

(slice, ((slice, int, int))) $PeekLevel$init$_load(slice sc_0) inline {
    var v'player = sc_0~load_msg_addr();
    var v'nonce = sc_0~load_int(257);
    var v'password = sc_0~load_int(257);
    return (sc_0, (v'player, v'nonce, v'password));
}

(slice, int, int, int) $PeekLevel$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PeekLevel$_load();
    }
    else {
        (slice $player, int $nonce, int $password) = $sc~$PeekLevel$init$_load();
        $sc.end_parse();
        return $PeekLevel$_contract_init($player, $nonce, $password);
    }
}

() $PeekLevel$_contract_store((slice, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $PeekLevel$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract PeekLevel functions
;;

(slice, int, int, int) $PeekLevel$_contract_init(slice $player, int $nonce, int $password) impure inline {
    var (($self'player, $self'nonce, $self'password, $self'locked)) = (null(), null(), null(), true);
    $self'player = $player;
    $self'nonce = $nonce;
    $self'password = $password;
    return ($self'player, $self'nonce, $self'password, $self'locked);
}

((slice, int, int, int), int) $PeekLevel$_fun_locked((slice, int, int, int) $self) impure inline_ref {
    var (($self'player, $self'nonce, $self'password, $self'locked)) = $self;
    var $fresh$ret_0 = $self'locked;
    return (($self'player, $self'nonce, $self'password, $self'locked), $fresh$ret_0);
}

;;
;; Get methods of a Contract PeekLevel
;;

_ %locked() method_id(88503) {
    var self = $PeekLevel$_contract_load();
    var res = self~$PeekLevel$_fun_locked();
    return res;
}

;;
;; Routing of a Contract PeekLevel
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'player, $self'nonce, $self'password, $self'locked) = $PeekLevel$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var op = in_msg~load_opcode_internal();
    ;; Receive Unlock message
    if (op == 0x5938) {
        var $msg'password = in_msg~load_uint(32);
        throw_unless(28126, ($msg'password == $self'password));
        $self'locked = false;
        $PeekLevel$_contract_store(($self'player, $self'nonce, $self'password, $self'locked));
        return ();
    }
    
    ;; Receive Check message
    if (op == 0x2966) {
        var $_ = empty_tuple();
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body(__tact_context_get_sender(), 0, 64, false, $CheckLevelResult$_store_cell($CheckLevelResult$_constructor_name_completed(__gen_slice_string_e06e2cd38d6d41220cc16e599f6e6f40bee7f7e270bb241e58de58f19d891389(), (~ $self'locked)), begin_cell())));
        $PeekLevel$_contract_store(($self'player, $self'nonce, $self'password, $self'locked));
        return ();
    }
    
    ;; Receive Deploy message
    if (op == 0x946a98b6) {
        var $deploy'queryId = in_msg~load_uint(64);
        ($self'player, $self'nonce, $self'password, $self'locked)~$PeekLevel$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
        $PeekLevel$_contract_store(($self'player, $self'nonce, $self'password, $self'locked));
        return ();
    }
    
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}