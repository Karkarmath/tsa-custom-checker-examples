#include "../imports/stdlib.fc";
#include "../imports/tsa_functions.fc";

() on_internal_message_send(int balance, int msg_value, cell in_msg_full, slice msg_body, int input_id) impure method_id {
    slice body_copy = msg_body;
    body_copy~load_uint(32);  ;; Ignore the opcode
    int guess = body_copy~load_int(1);
    tsa_fetch_value(guess, -1 + input_id);
}

;; The solution requires sending at least 5 Flip messages.

() main() impure {
    tsa_forbid_failures();
    
    ;; Initialize C4 for puzzle contract
    cell stateCell = tsa_call_1_0(1, -11);
    slice stateSlice = stateCell.begin_parse();
    int loaded = stateSlice~load_int(1);
    slice player = stateSlice~load_msg_addr();   ;; 267 bits
    int nonce = stateSlice~load_int(257);
    int consecutiveWins = stateSlice~load_int(257);     ;; up to here, the cell contains 782 bits, 
                                                        ;; adding another int would produce a cell of length 1039, which passes the limit (1023 bits).
                                                        ;; Hence, we need to load a reference to a child cell.
    slice childSlice = stateSlice~load_ref().begin_parse();
    int flipsCount = childSlice~load_int(257);
    tsa_assert(loaded == -1);                           ;; The contract should be loaded
    tsa_assert(consecutiveWins == 0);                   ;; Initially, consecutiveWins is 0
    tsa_assert(flipsCount == 0);                        ;; Initially, flipsCount is 0
    tsa_fetch_value(stateCell, -1);                     ;; Show the entire contents of C4
    
    ;; Send the messages
    ;; Doing this with a repeat statement does not work
    ;; 
    ;; IMPORTANT: TSA takes around 16 minutes to solve the puzzle. 
    ;; The more messages we send, the more time it will take. So, it is recommended not to send more than 5 messages in general.
    tsa_send_internal_message(1, -10);
    tsa_send_internal_message(1, -20);
    tsa_send_internal_message(1, -30);
    tsa_send_internal_message(1, -40);
    tsa_send_internal_message(1, -50);
    
    ;; get the result
    int final_result = tsa_call_1_0(1, -10);
    tsa_fetch_value(final_result, 1);

    tsa_allow_failures();
    
    ;; We should find some messages that would make the result true
    throw_if(256, final_result == -1);
}
